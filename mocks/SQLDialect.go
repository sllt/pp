// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	exp "github.com/sllt/pp/exp"
	builder "github.com/sllt/pp/internal/builder"

	mock "github.com/stretchr/testify/mock"
)

// SQLDialect is an autogenerated mock type for the SQLDialect type
type SQLDialect struct {
	mock.Mock
}

// Dialect provides a mock function with given fields:
func (_m *SQLDialect) Dialect() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ToDeleteSQL provides a mock function with given fields: b, clauses
func (_m *SQLDialect) ToDeleteSQL(b builder.SQLBuilder, clauses exp.DeleteClauses) {
	_m.Called(b, clauses)
}

// ToInsertSQL provides a mock function with given fields: b, clauses
func (_m *SQLDialect) ToInsertSQL(b builder.SQLBuilder, clauses exp.InsertClauses) {
	_m.Called(b, clauses)
}

// ToSelectSQL provides a mock function with given fields: b, clauses
func (_m *SQLDialect) ToSelectSQL(b builder.SQLBuilder, clauses exp.SelectClauses) {
	_m.Called(b, clauses)
}

// ToTruncateSQL provides a mock function with given fields: b, clauses
func (_m *SQLDialect) ToTruncateSQL(b builder.SQLBuilder, clauses exp.TruncateClauses) {
	_m.Called(b, clauses)
}

// ToUpdateSQL provides a mock function with given fields: b, clauses
func (_m *SQLDialect) ToUpdateSQL(b builder.SQLBuilder, clauses exp.UpdateClauses) {
	_m.Called(b, clauses)
}
